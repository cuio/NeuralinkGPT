import torch
import torch.nn as nn
import torch.nn.functional as F

# Define the neural network architecture
class NeuralNetwork(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(NeuralNetwork, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        # initialize weights
        nn.init.kaiming_normal_(self.fc1.weight)
        nn.init.zeros_(self.fc1.bias)

        self.fc2 = nn.Linear(hidden_size, output_size)
        # initialize weights
        nn.init.kaiming_normal_(self.fc2.weight)
        nn.init.zeros_(self.fc2.bias)

        self.dropout = nn.Dropout(0.2)

    def forward(self, x):
        x = F.relu(self.fc1(x))  # apply ReLU activation to the first layer
        x = self.dropout(x)  # apply dropout
        x = self.fc2(x)  # apply linear transformation
        return F.log_softmax(x, dim=1)  # apply softmax activation to the output layer

# Example usage
input_size = 10
hidden_size = 20
output_size = 5

# Create an instance of the neural network
model = NeuralNetwork(input_size, hidden_size, output_size)

# Create dummy input
input_data = torch.randn(1, input_size)

# Forward pass
output = model(input_data)

# Print the output
print(output)
