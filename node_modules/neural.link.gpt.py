import os
import requests
import logging
from dotenv import load_dotenv

# Load environment variables from a .env file
load_dotenv()

# Set up logging
logging.basicConfig(level=logging.INFO)

# Retrieve API keys and endpoints from environment variables
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
NEURAL_LINK_API_KEY = os.getenv('NEURAL_LINK_API_KEY')

OPENAI_ENDPOINT = os.getenv('OPENAI_ENDPOINT', 'https://api.openai.com/v1/engines/davinci-codex/completions')
NEURAL_LINK_ENDPOINT = os.getenv('NEURAL_LINK_ENDPOINT', 'https://api.neurallink.com/v1/actions')

# Headers for the API requests
headers_openai = {
    'Authorization': f'Bearer {OPENAI_API_KEY}',
    'Content-Type': 'application/json'
}

headers_neural_link = {
    'Authorization': f'Bearer {NEURAL_LINK_API_KEY}',
    'Content-Type': 'application/json'
}

# Function to get response from GPT API
def get_response_from_gpt(prompt, max_tokens=150):
    data = {
        'prompt': prompt,
        'max_tokens': max_tokens
    }
    try:
        response = requests.post(OPENAI_ENDPOINT, headers=headers_openai, json=data)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logging.error(f'Error calling GPT API: {e}')
        return None

# Function to send data to Neural Link API
def send_to_neural_link(data):
    try:
        response = requests.post(NEURAL_LINK_ENDPOINT, headers=headers_neural_link, json=data)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logging.error(f'Error calling Neural Link API: {e}')
        return None

# Example usage
def main():
    try:
        # Step 1: Get response from GPT API
        gpt_prompt = 'Translate the following text to French: Hello, world!'
        gpt_response = get_response_from_gpt(gpt_prompt)

        if gpt_response:
            # Extract the text from the GPT response
            gpt_text = gpt_response.get('choices', [{}])[0].get('text', '')
            logging.info(f'GPT Response: {gpt_text}')

            # Step 2: Send GPT API response to Neural Link API
            neural_link_data = {'text': gpt_text}
            neural_link_response = send_to_neural_link(neural_link_data)

            if neural_link_response:
                # Do something with the Neural Link response
                logging.info(f'Neural Link Response: {neural_link_response}')
            else:
                logging.error('Failed to get a valid response from Neural Link API')

        else:
            logging.error('Failed to get a valid response from GPT API')

    except Exception as e:
        logging.error(f'An unhandled exception occurred: {e}')

if __name__ == '__main__':
    main()
